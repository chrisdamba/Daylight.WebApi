{"version":3,"file":"public\\test\\javascripts\\test.js","sources":["test/components/collection_view_test.coffee","test/initialize.coffee"],"names":[],"mappingstUA;;A,CCAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;;A","sourcesContent":["var CollectionView;\n\nCollectionView = require('components/collection_view');\n\ndescribe('components/collection_view', function() {\n  var sut;\n  sut = null;\n  beforeEach(function() {\n    return sut = new CollectionView({\n      collection: new Backbone.Collection(),\n      itemView: Backbone.View\n    });\n  });\n  describe('dispose()', function() {\n    beforeEach(function() {\n      return sut.dispose();\n    });\n    it('should remove the reference to _itemView', function() {\n      return expect(sut._itemView).not.to.exist;\n    });\n    it('should remove the reference to _itemViews', function() {\n      return expect(sut._itemViews).not.to.exist;\n    });\n    return it('should remove the reference to collection', function() {\n      return expect(sut.collection).not.to.exist;\n    });\n  });\n  describe('initialize()', function() {\n    beforeEach(function() {\n      sinon.stub(sut, '_renderItem');\n      sinon.stub(sut, '_removeItem');\n      sinon.stub(sut, '_reset');\n      return sut.initialize({\n        collection: new Backbone.Collection(),\n        itemView: function() {}\n      });\n    });\n    describe('when no collection is passed in', function() {\n      return it('should throw an error', function() {\n        return expect(function() {\n          return new CollectionView({\n            collection: void 0,\n            itemView: Backbone.View\n          });\n        }).to[\"throw\"]('ERROR: CollectionView.initialize() - collection option must be specified');\n      });\n    });\n    describe('when no itemView method is passed in', function() {\n      return it('should throw an error', function() {\n        return expect(function() {\n          return new CollectionView({\n            collection: new Backbone.Collection(),\n            itemView: void 0\n          });\n        }).to[\"throw\"]('ERROR: CollectionView.initialize() - itemView option must be specified');\n      });\n    });\n    it('should store a reference to the itemView', function() {\n      var fn;\n      fn = function() {};\n      sut = new CollectionView({\n        collection: new Backbone.Collection(),\n        itemView: fn\n      });\n      expect(sut._itemView).to.exist;\n      return sut._itemView.should.equal(fn);\n    });\n    it('should create the _itemViews array', function() {\n      expect(sut._itemViews).to.exist;\n      return expect(sut._itemViews).to.be.an.instanceOf(Array);\n    });\n    describe('when a model is added to the collection', function() {\n      beforeEach(function() {\n        return sut.collection.trigger('add');\n      });\n      return it('should call _renderItem()', function() {\n        return sut._renderItem.should.have.been.called;\n      });\n    });\n    describe('when a model is removed from the collection', function() {\n      beforeEach(function() {\n        return sut.collection.trigger('remove');\n      });\n      return it('should call _removeItem()', function() {\n        return sut._removeItem.should.have.been.called;\n      });\n    });\n    return describe('when the collection is reset', function() {\n      beforeEach(function() {\n        return sut.collection.trigger('reset');\n      });\n      return it('should call _reset()', function() {\n        return sut._reset.should.have.been.called;\n      });\n    });\n  });\n  describe('render()', function() {\n    var item0, item1, item2;\n    item0 = item1 = item2 = null;\n    beforeEach(function() {\n      sinon.stub(sut, '_renderItem');\n      item0 = new Backbone.Model({\n        id: 'item0'\n      });\n      item1 = new Backbone.Model({\n        id: 'item1'\n      });\n      item2 = new Backbone.Model({\n        id: 'item2'\n      });\n      return sut.collection.reset([item0, item1, item2], {\n        silent: true\n      });\n    });\n    it('should return itself', function() {\n      return sut.render().should.equal(sut);\n    });\n    return it('should call _renderItem() for each item in the collection', function() {\n      sut.render();\n      sut._renderItem.should.have.been.calledThrice;\n      sut._renderItem.should.have.been.calledWith(item0);\n      sut._renderItem.should.have.been.calledWith(item1);\n      return sut._renderItem.should.have.been.calledWith(item2);\n    });\n  });\n  describe('_renderItem()', function() {\n    var itemModel, itemView;\n    itemModel = itemView = null;\n    beforeEach(function() {\n      sut.renderChild = function() {};\n      sut._itemView = Backbone.View;\n      sinon.stub(sut, 'renderChild', function(view) {\n        return view;\n      });\n      sinon.spy(sut, 'trigger');\n      sinon.stub(sut.$el, 'append', function(el) {\n        return sut.$el;\n      });\n      return itemModel = new Backbone.Model({\n        id: 'item1'\n      });\n    });\n    it('should return a new view for the model', function() {\n      itemView = sut._renderItem(itemModel);\n      expect(itemView).to.exist;\n      return itemView.should.be.an.instanceOf(Backbone.View);\n    });\n    it('should pass the model into the view', function() {\n      itemView = sut._renderItem(itemModel);\n      expect(itemView.model).to.exist;\n      return itemView.model.should.equal(itemModel);\n    });\n    it('should create and store a view for the model passed in', function() {\n      itemView = sut._renderItem(itemModel);\n      sut._itemViews.length.should.equal(1);\n      return sut._itemViews[0].should.equal(itemView);\n    });\n    it('should render the item view as a child', function() {\n      itemView = sut._renderItem(itemModel);\n      sut.renderChild.should.have.been.calledOnce;\n      return sut.renderChild.should.have.been.calledWith(itemView);\n    });\n    it('should append each item to the el', function() {\n      itemView = sut._renderItem(itemModel);\n      sut.$el.append.should.have.been.calledOnce;\n      return sut.$el.append.should.have.been.calledWith(itemView.el);\n    });\n    describe('when itemView is a factory function', function() {\n      beforeEach(function() {\n        sinon.stub(sut, '_itemView', function(options) {\n          return new Backbone.View(options);\n        });\n        return sut._renderItem(itemModel);\n      });\n      return it('should use it to create a new view instance for each item', function() {\n        return sut._itemView.should.have.been.calledWith({\n          model: itemModel\n        });\n      });\n    });\n    it('should trigger an \\'itemAdded\\' event before it is rendered', function(done) {\n      sut.on('itemAdded', function(e) {\n        e.target.should.equal(sut);\n        e.itemView.should.equal(sut._itemViews[sut._itemViews.length - 1]);\n        sut.trigger.should.not.have.been.calledWith('itemRendered');\n        return done();\n      });\n      return sut._renderItem(itemModel);\n    });\n    return it('should trigger an \\'itemRendered\\' event', function(done) {\n      sut.on('itemRendered', function(e) {\n        e.target.should.equal(sut);\n        e.itemView.should.equal(sut._itemViews[sut._itemViews.length - 1]);\n        sut.trigger.should.have.been.calledWith('itemAdded');\n        return done();\n      });\n      return sut._renderItem(itemModel);\n    });\n  });\n  describe('_removeItem()', function() {\n    var itemModel0, itemModel1, itemModel2, itemView0, itemView1, itemView2;\n    itemModel0 = itemModel1 = itemModel2 = itemView0 = itemView1 = itemView2 = null;\n    beforeEach(function() {\n      sinon.stub(sut, 'trigger');\n      itemModel0 = new Backbone.Model({\n        id: 'item0'\n      });\n      itemModel1 = new Backbone.Model({\n        id: 'item1'\n      });\n      itemModel2 = new Backbone.Model({\n        id: 'item2'\n      });\n      itemView0 = new Backbone.View({\n        model: itemModel0\n      });\n      itemView0.leave = sinon.stub();\n      itemView1 = new Backbone.View({\n        model: itemModel1\n      });\n      itemView1.leave = sinon.stub();\n      itemView2 = new Backbone.View({\n        model: itemModel2\n      });\n      itemView2.leave = sinon.stub();\n      sut._itemViews = [itemView0, itemView1, itemView2];\n      return sut._removeItem(itemModel1);\n    });\n    it('should remove the view that matches the model from _itemViews', function() {\n      sut._itemViews.length.should.equal(2);\n      sut._itemViews[0].should.equal(itemView0);\n      return sut._itemViews[1].should.equal(itemView2);\n    });\n    it('should call leave() on the view that is removed', function() {\n      return itemView1.leave.should.have.been.called;\n    });\n    return it('should trigger an \\'itemRemoved\\' event', function() {\n      return sut.trigger.should.have.been.calledWith('itemRemoved', {\n        target: sut,\n        itemView: itemView1\n      });\n    });\n  });\n  describe('views()', function() {\n    var result;\n    result = null;\n    describe('when there are no views', function() {\n      beforeEach(function() {\n        return result = sut.views();\n      });\n      return it('should return an empty Array', function() {\n        expect(result).to.exist;\n        return result.length.should.equal(0);\n      });\n    });\n    return describe('when there are item views', function() {\n      var view0, view1, view2;\n      view0 = view1 = view2 = null;\n      beforeEach(function() {\n        view0 = new Backbone.View();\n        view1 = new Backbone.View();\n        view2 = new Backbone.View();\n        sut._itemViews = [view0, view1, view2];\n        return result = sut.views();\n      });\n      it('should return an Array of all the views in order', function() {\n        expect(result).to.exist;\n        result.length.should.equal(3);\n        result[0].should.equal(view0);\n        result[1].should.equal(view1);\n        return result[2].should.equal(view2);\n      });\n      return describe('when the array is modified', function() {\n        beforeEach(function() {\n          return result.splice(0, 1);\n        });\n        return it('should not alter the internal Array', function() {\n          return sut.views().length.should.equal(3);\n        });\n      });\n    });\n  });\n  describe('size()', function() {\n    describe('when there are no views', function() {\n      return it('should return zero', function() {\n        return sut.size().should.equal(0);\n      });\n    });\n    return describe('when there are item views', function() {\n      return it('should return the number of views', function() {\n        sut._itemViews.push(new Backbone.View());\n        sut.size().should.equal(1);\n        sut._itemViews.push(new Backbone.View());\n        sut.size().should.equal(2);\n        sut._itemViews.push(new Backbone.View());\n        return sut.size().should.equal(3);\n      });\n    });\n  });\n  return describe('_reset()', function() {\n    var views;\n    views = null;\n    beforeEach(function() {\n      sinon.stub(sut, 'render');\n      views = [\n        {\n          leave: sinon.stub()\n        }, {\n          leave: sinon.stub()\n        }\n      ];\n      sut._itemViews = views;\n      return sut._reset();\n    });\n    it('should call leave on the views', function() {\n      views[0].leave.should.have.been.called;\n      return views[1].leave.should.have.been.called;\n    });\n    it('should set _itemViews to an empty array', function() {\n      return sut._itemViews.should.deep.equal([]);\n    });\n    return it('should call render', function() {\n      return sut.render.should.have.been.called;\n    });\n  });\n});\n","var module, _i, _len, _ref;\n\n_ref = window.require.list();\nfor (_i = 0, _len = _ref.length; _i < _len; _i++) {\n  module = _ref[_i];\n  if (/_test$/.test(module)) {\n    require(module);\n  }\n}\n"]}